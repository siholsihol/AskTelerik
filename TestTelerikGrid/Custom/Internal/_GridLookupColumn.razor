@inherits ComponentBase

<div @onkeyup="@OnHandleKeyDownLookup">
    <div class="row">
        <div class="col-10">
            @* <input @ref="@_inputRef" type="text" value="@Value" tabindex="0" class="w-100" @onkeyup="@OnHandleKeyDownLookup" /> *@
            <TelerikTextBox Value="@Value"
                            ValueChanged="@ValueChangedHandler"
                            ValueExpression="@(() => Value)"
                            DebounceDelay="0" 
                            Class="w-100" 
                            OnBlur="@OnBlurHandler" />
        </div>
        <div class="col-2">
            <TelerikButton @ref="@_buttonRef" OnClick="@OnClickHandler" TabIndex="-1" Class="w-100" Id="LookupButton1">...</TelerikButton>
        </div>
    </div>
</div>

@code {
    [Parameter] public EventCallback<string> ValueChanged { get; set; }
    [Parameter] public string Value { get; set; }
    [Parameter] public object Context { get; set; }
    [Parameter] public string FieldName { get; set; }
    [Parameter] public string Name { get; set; }
    [Inject] private IJSRuntime JS { get; set; }

    private ElementReference _inputRef;
    private TelerikButton _buttonRef;

    private void OnClickHandler()
    {
        //raise popup here
    }

    public void ValueChangedHandler(string pcValue)
    {
        Context.GetType().GetProperty(FieldName).SetValue(Context, pcValue);

        if (ValueChanged.HasDelegate)
            ValueChanged.InvokeAsync(pcValue);
    }

    private async Task OnBlurHandler()
    {
        try
        {
            // await _buttonRef.FocusAsync(); //not working
            await JS.InvokeVoidAsync("focusToElement", "LookupButton1"); //not working
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private void OnHandleKeyDownLookup(KeyboardEventArgs e)
    {

    }
}