@page "/customfetchdata"
@inject HttpClient Http

<PageTitle>Product</PageTitle>

<h1>Product</h1>

<p>This component demonstrates fetching data from the server.</p>

<CustomGrid DataSource="products"
            R_ServiceSave="@R_ServiceSave"
            R_ServiceGetRecord="@R_ServiceGetRecord"
            R_AfterAdd="@R_AfterAdd"
            R_ServiceDelete="@R_ServiceDelete">
    <GridColumnsContent>
        <CustomNumericTextBoxColumn FieldName="@nameof(ProductDTO.Id)" HeaderText="Id"></CustomNumericTextBoxColumn>
        <CustomTextBoxColumn FieldName="@nameof(ProductDTO.Name)" HeaderText="Product Name"></CustomTextBoxColumn>
        <CustomNumericTextBoxColumn FieldName="@nameof(ProductDTO.Price)" HeaderText="Price"></CustomNumericTextBoxColumn>
    </GridColumnsContent>
</CustomGrid>

@code {
    [Inject] public ProductService ProductService { get; set; }

    private ObservableCollection<ProductDTO> products;

    protected override Task OnInitializedAsync()
    {
        var loProduct = ProductService.GenerateProduct(10);
        products = new ObservableCollection<ProductDTO>(loProduct);

        return Task.CompletedTask;
    }

    #region CRUD
    private void R_AfterAdd(R_AfterAddEventArgs args)
    {
        var data = (ProductDTO)args.Data;

        data.Price = 2000;
    }

    private void R_ServiceSave(R_ServiceSaveEventArgs args)
    {
        if (args.GridMode == GridMode.Add)
            ProductService.CreateProduct((ProductDTO)args.Data);
        else
            ProductService.UpdateProduct((ProductDTO)args.Data);

        args.Result = args.Data;

        Console.WriteLine("Create event is fired.");
    }

    private void R_ServiceGetRecord(R_ServiceGetRecordEventArgs args)
    {
        args.Result = args.Data;
    }

    private void R_ServiceDelete(R_ServiceDeleteEventArgs args)
    {
        ProductService.DeleteProduct((ProductDTO)args.Data);
    }
    #endregion
}